//live code in https://www.onlinegdb.com/CR1IiUq0L César Bobadilla Medina
#include <iostream>
#include <chrono>

const int MAX = 1000;  // Tamaño de la matriz y los vectores

int main() {
    double A[MAX][MAX];
    double x[MAX];
    double y[MAX];

    // Inicializar A, x y asignar y = 0
    // ...

    // Primer par de bucles
    auto start1 = std::chrono::high_resolution_clock::now();
    for (int i = 0; i < MAX; i++) {
        for (int j = 0; j < MAX; j++) {
            y[i] += A[i][j] * x[j];
        }
    }
    auto end1 = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration1 = end1 - start1;

    // Asignar y = 0
    // ...

    // Segundo par de bucles
    auto start2 = std::chrono::high_resolution_clock::now();
    for (int j = 0; j < MAX; j++) {
        for (int i = 0; i < MAX; i++) {
            y[i] += A[i][j] * x[j];
        }
    }
    auto end2 = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration2 = end2 - start2;

    // Comparación de tiempos
    std::cout << "Tiempo del primer par de bucles: " << duration1.count() << " segundos" << std::endl;
    std::cout << "Tiempo del segundo par de bucles: " << duration2.count() << " segundos" << std::endl;

    return 0;
}
/*
//Como se ve, tenemos un bucle mas rapido que otro
//Tiempo del primer par de bucles: 0.00296451 segundos
//Tiempo del segundo par de bucles: 0.00365888 segundos
En este ejemplo, los dos pares de bucles realizan la misma operación de multiplicación de matriz-vector. Luego, se miden los tiempos de ejecución utilizando la biblioteca <chrono> para calcular cuánto tiempo lleva cada bucle.
Es importante tener en cuenta que los resultados pueden variar según la configuración del sistema y el compilador utilizado. El propósito de esta comparación es observar cómo los cambios en el orden de los bucles anidados pueden afectar el rendimiento en términos de acceso a la memoria caché.
*/
